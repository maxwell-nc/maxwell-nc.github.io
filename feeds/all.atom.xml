<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Maxwell's Growth Path</title><link href="https://maxwell-nc.github.io/" rel="alternate"></link><link href="https://maxwell-nc.github.io/feeds/all.atom.xml" rel="self"></link><id>https://maxwell-nc.github.io/</id><updated>2017-05-24T00:00:00+08:00</updated><entry><title>快速集成ReactNative到现有Android项目</title><link href="https://maxwell-nc.github.io/android/rnIntergation.html" rel="alternate"></link><published>2017-05-24T00:00:00+08:00</published><updated>2017-05-24T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-24:/android/rnIntergation.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;突然想起来之前旧博客的&lt;a href="http://blog.csdn.net/maxwell_nc/article/details/60960864"&gt;《Windows下搭建ReactNative开发环境（Android）》&lt;/a&gt;留下的一个坑，遂填一下坑。而且集成ReactNative到现有Android项目也不是什么容易的事情，网上很多教程都是不完整，你会发现跟着来做都是一步一个坑，不断搜索error解决花了半天才能搭建好，下次再做又是一堆问题，所以我这里记录下自己的集成心得。&lt;/p&gt;
&lt;h2&gt;准备操作&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先你建议你先看看&lt;a href="http://blog.csdn.net/maxwell_nc/article/details/60960864"&gt;上一篇搭建环境的文章&lt;/a&gt;，否则接下来的内容你可以看不懂或者没有对应的工具。然后就是你需要有一个现有的Android项目，如果你需要创建全新项目前一篇已经描述过了，本文就不再重复了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文集成的&lt;strong&gt;ReactNative版本为0.44&lt;/strong&gt;，如果不是的话可能与本文内容有所差异，请自行甄别。&lt;/p&gt;
&lt;h2&gt;安装ReactNative到项目&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我们已一个已存在的工程ExistedProject为例，首先打开项目的目录，在CMD输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;npm init&lt;/code&gt;会提示引导你创建package.json,如下图所示：
&lt;img alt="init" src="../images/rnIntergation/1.jpg"&gt;
&amp;emsp;&amp;emsp;创建成功后可以安装React、ReactNative到目录里面，继续在&lt;strong&gt;当前目录&lt;/strong&gt;下输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install --save react react-native
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;等待安装成功的过程中，可以到&lt;a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig"&gt;https://raw.githubusercontent …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;突然想起来之前旧博客的&lt;a href="http://blog.csdn.net/maxwell_nc/article/details/60960864"&gt;《Windows下搭建ReactNative开发环境（Android）》&lt;/a&gt;留下的一个坑，遂填一下坑。而且集成ReactNative到现有Android项目也不是什么容易的事情，网上很多教程都是不完整，你会发现跟着来做都是一步一个坑，不断搜索error解决花了半天才能搭建好，下次再做又是一堆问题，所以我这里记录下自己的集成心得。&lt;/p&gt;
&lt;h2&gt;准备操作&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先你建议你先看看&lt;a href="http://blog.csdn.net/maxwell_nc/article/details/60960864"&gt;上一篇搭建环境的文章&lt;/a&gt;，否则接下来的内容你可以看不懂或者没有对应的工具。然后就是你需要有一个现有的Android项目，如果你需要创建全新项目前一篇已经描述过了，本文就不再重复了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文集成的&lt;strong&gt;ReactNative版本为0.44&lt;/strong&gt;，如果不是的话可能与本文内容有所差异，请自行甄别。&lt;/p&gt;
&lt;h2&gt;安装ReactNative到项目&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我们已一个已存在的工程ExistedProject为例，首先打开项目的目录，在CMD输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;&lt;code&gt;npm init&lt;/code&gt;会提示引导你创建package.json,如下图所示：
&lt;img alt="init" src="../images/rnIntergation/1.jpg"&gt;
&amp;emsp;&amp;emsp;创建成功后可以安装React、ReactNative到目录里面，继续在&lt;strong&gt;当前目录&lt;/strong&gt;下输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install --save react react-native
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;等待安装成功的过程中，可以到&lt;a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig"&gt;https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig&lt;/a&gt;下载&lt;code&gt;.flowconfig&lt;/code&gt;文件复制到项目之中。（这个文件只是用来约束Javascript代码，也可以跳过），很快就安装完成了：
&lt;img alt="warn" src="../images/rnIntergation/2.jpg"&gt;
&amp;emsp;&amp;emsp;这里需要有一个警告：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="mf"&gt;@0.44.0&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;peer&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="mf"&gt;@16.0.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;很多的文章都没有说明这个，导致后面项目运行后会出错。遇到这个问题是因为ReactNative和React的版本有着严格的对应关系，如果不一样就会报错，解决方法就是重新安装对应的React版本，输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="mf"&gt;@16.0.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这样就可以避免后面出现的这两个问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Unable to resolve module `react/lib/ReactDebugCurrentFrame`
Unable to resolve module `react/lib/ReactComponentWithPureRenderMixin`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;接下来修改package.json文件,在&lt;code&gt;"scripts"&lt;/code&gt;下增加一句&lt;code&gt;"start": "node node_modules/react-native/local-cli/cli.js start"&lt;/code&gt;,注意json格式，需要添加逗号，最后package.json文件应该是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ext_prj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nothing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node node_modules/react-native/local-cli/cli.js start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;maxwell-nc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;license&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ISC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;react&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^16.0.0-alpha.6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;react-native&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^0.44.0&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建安卓首页js文件&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接下来在项目目录中创建index.android.js文件，然后编辑内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;react&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppRegistry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;react-native&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Text&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//这里的&amp;#39;HelloWorld&amp;#39;是后面android项目使用的&lt;/span&gt;
&lt;span class="c1"&gt;//而后面的HelloWorld是class的名称&lt;/span&gt;
&lt;span class="nx"&gt;AppRegistry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HelloWorld&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;留意注释里面的内容，后面有用到，这个文件是react页面的启动页。基本的框架已经搭建好，下面我们配置android项目的设置。&lt;/p&gt;
&lt;h2&gt;配置Android项目&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先在android项目目录下的build.gradle文件添加依赖Maven仓库，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;allprojects {
    repositories {
        maven {
            url &amp;quot;$rootDir/node_modules/react-native/android&amp;quot;
        }
        jcenter()
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这里又要注意了，node_modules目录的位置必须正确，否则Gradle就会报错误了。然后修改app目录下的build.gradle文件，添加ReactNative依赖：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dependencies {
    //...
    compile &amp;quot;com.facebook.react:react-native:+&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;为了防止64位库问题和findbugsbug版本问题，同时增加下面的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;android {
    //...
    defaultConfig {
        //...
        ndk{
            abiFilters &amp;quot;armeabi-v7a&amp;quot;,&amp;quot;armeabi-v7a&amp;quot;,&amp;quot;x86&amp;quot;
        }
    }
    //...
    configurations.all {
        resolutionStrategy.force &amp;#39;com.google.code.findbugs:jsr305:3.0.0&amp;#39;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果没有设置，后面可能会产生如下类似问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Conflict&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;com.google.code.findbugs:jsr305&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UnsatisfiedLinkError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;DSO&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;libreactnativejni&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;so&lt;/span&gt;
&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UnsatisfiedLinkError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dlopen&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xxx/libgnustl_shared.so&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;配置完Gradle之后执行以下Sync操作确保上述操作无误，然后给AndroidManifest.xml文件添加上网路权限，和DevSettingsActivity界面配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.permission.INTERNET&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.facebook.react.devsupport.DevSettingsActivity&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;DevSettingsActivity这个界面在Release的时候可以去掉，仅仅用于开发测试设置。&lt;/p&gt;
&lt;h2&gt;Andorid调用ReactNative&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先需要创建一个基类，方便后面使用，这里给大家写了一个BaseReactActivity：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * ReactNativeActivity基类&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseReactActivity&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;DefaultHardwareBackBtnHandler&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ReactRootView&lt;/span&gt; &lt;span class="n"&gt;mReactRootView&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ReactInstanceManager&lt;/span&gt; &lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Nullable&lt;/span&gt; &lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onCreate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ReactInstanceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setApplication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getApplication&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBundleAssetName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.android.bundle&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setJSMainModuleName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.android&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addPackage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MainReactPackage&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setUseDeveloperSupport&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInitialLifecycleState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LifecycleState&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RESUMED&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 加载ReactNative内容&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loadReact&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//这里的HelloWorld必须对应“index.android.js”中的“AppRegistry.registerComponent()”的第一个参数&lt;/span&gt;
        &lt;span class="n"&gt;mReactRootView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startReactApplication&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;HelloWorld&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;invokeDefaultOnBackPressed&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onBackPressed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onPause&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onPause&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onHostPause&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onResume&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onHostResume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onDestroy&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onDestroy&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onHostDestroy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onBackPressed&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mReactInstanceManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onBackPressed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onBackPressed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;注意代码中startReactApplication方法中的参数要与前面index.android.js文件中设置的一样（看注释），然后根据官方的文档，这个ReactInstanceManager可以设置成一个单例，全局使用同一个ReactInstanceManager就可以了，这里为了方便快捷就写在一起了。这个类主要传递了声明周期给ReactNative，也处理了后退按钮事件。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;注意上面的类中BuildConfig的导包是选择自己的包名，而不是其他：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.github.maxwell.nc.existedproject.BuildConfig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;下面需要把使用到ReactNative的Activity继承这个Activity，如果需要这个ContentView使用ReactRootView，可以在onCreate中添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mReactRootView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ReactRootView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果是在布局中增加了ReactRootView，可以使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;activity_main&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;mReactRootView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ReactRootView&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rrv_content&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;然后可以调用&lt;code&gt;loadReact();&lt;/code&gt;去加载ReactNative内容。&lt;/p&gt;
&lt;h2&gt;Android打包&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;前面的操作完成后就基本完成了，现在需要打包一份离线JSBundle进去App，用于没网的时候App展示使用。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先在项目app/src/main下面必须要创建一个assets目录，否则后面生成会报&lt;code&gt;ENOENT: no such file or directory, open 'E:\Project\ExistedProject\app\src\main\assets\index.android.bundle'&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;然后在项目目录下打开CMD，输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output app/src/main/assets/index.android.bundle --assets-dest app/src/main/res/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;看到&lt;code&gt;Done writing bundle output&lt;/code&gt;就证明生成成功了。接下来直接运行App到手机上看看效果，成功看到离线内容。
&lt;img alt="result" src="../images/rnIntergation/3.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;启动服务器&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;上面的查看效果是离线JSBundle的效果，如果你尝试reload的话就会发现出现error，因为连接不上服务器。直接在目录下输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;启动服务器后不要关闭CMD，手机App注意设置Debug server host &amp;amp; port为主机的地址（具体可以参考我的&lt;a href="http://blog.csdn.net/maxwell_nc/article/details/60960864"&gt;上一篇博文&lt;/a&gt;）,然后reload，看到App绿色的进度条或者服务器CMD中build的进度条就知道正在构建。成功后就可以看到服务器端的js效果。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;可以尝试修改提示语为“Hello ReactNative For Android!”并且保存，手机端reload既可以看到app端更新了的效果：
&lt;img alt="update" src="../images/rnIntergation/4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;注意你修改了资源可以不重新打包离线JSBundle进去，但是至少需要一份离线JSBundle才能运行App，否则Gradle编译无法通过。&lt;/p&gt;
&lt;h2&gt;远程调试&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果你选在手机选择“Debug JS Remotely”，如果你没有安装chrome浏览器，不出意外就是npm服务器提示：
&lt;img alt="update" src="../images/rnIntergation/5.jpg"&gt;
&amp;emsp;&amp;emsp;然后手机端也红屏提示错误，实际上你只需要用任一款chrome壳浏览器打开&lt;a href="http://localhost:8081/debugger-ui"&gt;http://localhost:8081/debugger-ui&lt;/a&gt;然后重新reload，看到&lt;code&gt;Status: Debugger session #0 active.&lt;/code&gt;就可以连上远程调试了，调试不是本文的内容就不再阐述了。&lt;/p&gt;
&lt;h2&gt;尾声&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;ReactNative集成的过程中有很多的坑，如果你按照我的博文来操作可能你会说：“不会啊，一路流程非常轻松没问题啊”,但实际上本博文只是把可能的遇到问题和处理地方已经提前说明了。其中遇到的错误本文也列出来了，方便后面遇到的朋友也参考学习下。&lt;/p&gt;
&lt;h2&gt;相关文章&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Windows下搭建ReactNative开发环境（Android）：&lt;/strong&gt;&lt;a href="http://blog.csdn.net/maxwell_nc/article/details/60960864"&gt;http://blog.csdn.net/maxwell_nc/article/details/60960864&lt;/a&gt;&lt;/p&gt;</content><category term="android"></category><category term="react-native"></category></entry><entry><title>Android单元测试之JUnit框架</title><link href="https://maxwell-nc.github.io/android/junitTest.html" rel="alternate"></link><published>2017-05-22T00:00:00+08:00</published><updated>2017-05-22T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-22:/android/junitTest.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;最近抽空整理下项目，顺手整理了单元测试，于是记录下自己学习单元测试的心得，让更多的人快速用上单元测试提高开发效率。本文主要讲解如何使用JUnit框架进行单元测试，不会提及单元测试优缺点。&lt;/p&gt;
&lt;h2&gt;在Android项目中使用JUnit&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;记得在Eclipse中集成Junit框架是一件很复杂的事情，首先要导入lib包，然后配置...现在如果使用Android Studio的话什么工作都不需要处理，创建一个新的项目就帮你配置好整个JUnit框架，你只需要专心写测试类即可。而且测试类也是可以自动生成的,如下图所示：
&lt;img alt="dir" src="../images/junitTest/1.jpg"&gt;
&amp;emsp;&amp;emsp;可以看到生成&lt;code&gt;app/src/main&lt;/code&gt;为源码目录，对应&lt;code&gt;app/src/test&lt;/code&gt;为测试类目录，Android Studio会自动生成一个ExampleUnitTest类，实际上这个test目录下的包名可以与src目录的不一样。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以上图为例，我写了一个ExampleUtils作为本次测试例子，其代码为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleUtils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 获取完整的地址路径&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @param url 可能不完整的路径&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getFullUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;最近抽空整理下项目，顺手整理了单元测试，于是记录下自己学习单元测试的心得，让更多的人快速用上单元测试提高开发效率。本文主要讲解如何使用JUnit框架进行单元测试，不会提及单元测试优缺点。&lt;/p&gt;
&lt;h2&gt;在Android项目中使用JUnit&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;记得在Eclipse中集成Junit框架是一件很复杂的事情，首先要导入lib包，然后配置...现在如果使用Android Studio的话什么工作都不需要处理，创建一个新的项目就帮你配置好整个JUnit框架，你只需要专心写测试类即可。而且测试类也是可以自动生成的,如下图所示：
&lt;img alt="dir" src="../images/junitTest/1.jpg"&gt;
&amp;emsp;&amp;emsp;可以看到生成&lt;code&gt;app/src/main&lt;/code&gt;为源码目录，对应&lt;code&gt;app/src/test&lt;/code&gt;为测试类目录，Android Studio会自动生成一个ExampleUnitTest类，实际上这个test目录下的包名可以与src目录的不一样。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以上图为例，我写了一个ExampleUtils作为本次测试例子，其代码为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleUtils&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * 获取完整的地址路径&lt;/span&gt;
&lt;span class="cm"&gt;     *&lt;/span&gt;
&lt;span class="cm"&gt;     * @param url 可能不完整的路径&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getFullUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果你要创建一个对应的测试类，比较笨的方法就是到&lt;code&gt;app/src/test&lt;/code&gt;目录下创建一个名字相近的ExampleUtilsTest类，然后一个个需要测试的方法都写一遍testXXX()的单元测试方法。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;强大的Android Studio可以帮我们完成这个操作，在任意需要测试的类（或者方法）下面按下Ctrl+Shift+T（这是默认热键，你也可以右键-&amp;gt;Go To-&amp;gt;Test）弹出如下提示：
&lt;img alt="hint" src="../images/junitTest/2.jpg"&gt;
&amp;emsp;&amp;emsp;如果你已经创建过，则会提示对应的测试类让你跳转过去，同样测试类也可以利用这个方法跳转到被测试类。根据上述操作创建一个新的测试类，然后会弹出提示界面：
&lt;img alt="new" src="../images/junitTest/3.jpg"&gt;
&amp;emsp;&amp;emsp;我们使用的库是JUnit4，这个无需修改，一般名字Class Name也无需修改，Generate这个后文再说，总之现在Member中勾选需要测试的方法。注意如果一个方法没有出现在这个列表上，证明这个方法无法测试。比如一个private声明的方法，他不需要测试也无法测试，因为它是属于类内部的过程，而单元测试不关系这个过程。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;选择方法后会提示你选择目标目录，可能为了兼容以前的版本还是怎么的，这里我们只需要选择第二个&lt;code&gt;app/src/test&lt;/code&gt;目录，与Android Studio自动生成的目录相似即可：
&lt;img alt="choose" src="../images/junitTest/4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;可以看到生成的类，有些人可能喜欢改成testXXX，这个则需要自己手动修改了。点击每个方法前面的三角形就可以单独测试一个方法，点击类前面的两个三角形按钮则是一次运行类中所有的测试方法：
&lt;img alt="sample" src="../images/junitTest/5.jpg"&gt;
&amp;emsp;&amp;emsp;我们可以编写单元测试方法（Assert用法后文会说明）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;getFullUrl&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;testUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://maxwell-nc.github.io&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;fullUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExampleUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFullUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testUrl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullUrl&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//假设fullUrl与testUrl相同&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;点击Run后则会生成一个测试结果，如果一条绿条就证明已经成功通过测试了，否则的话你可以查看哪一个方法存在问题，然后处理。
&lt;img alt="pass" src="../images/junitTest/6.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;批量测试和生产报告&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;假设你只有一个类或者只有几个类需要测试的话，那可以直接使用上文说的方法来测试，但是假设你有很多的类和方法需要测试的话上面的操作就显得是十分笨拙。Android Studio的Gradle插件为我们生成了三个任务：
- testDebugUnitTest
- testReleaseUnitTest
- test
&amp;emsp;&amp;emsp;其中前两个任务是分别执行为Debug和Release模式下的所有单元测试，第三个任务就是执行前面两个任务。
&amp;emsp;&amp;emsp;你可以在Terminal里面使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gradlew testDebugUnitTest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;来执行命令，由于是Wrapper可能需要额外的下载配置时间，也可以直接在面板中选择Task执行（使用本地的Gradle）：
&lt;img alt="task" src="../images/junitTest/7.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;等待执行完成就可以看到&lt;code&gt;build/reports/tests/&lt;/code&gt;目录下对应的Html报告：
&lt;img alt="build" src="../images/junitTest/8.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;使用浏览器打开可以看到详细测试报告：
&lt;img alt="report" src="../images/junitTest/9.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;JUnit Assert&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下面进入正题，上文我们使用了一个Assert.assertEquals方法来判断fullUrl和testUrl是否相同，其中这个Assert类就是用来验证结果的，有“假设”的意思。比如assertEquals方法就是“假设相同”的意思，如果不相同则会报错。
&amp;emsp;&amp;emsp;那么除了assertEquals之外还有什么方法呢？我们可以从Assert源码结构观察出来，下面我们列举一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;assertTrue&lt;/strong&gt; 假设为真&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertFalse&lt;/strong&gt; 假设为假&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertEquals&lt;/strong&gt; 假设相同（基本数据类型或者对象）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertNotEquals&lt;/strong&gt; 假设不相同（基本数据类型或者对象）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertNull&lt;/strong&gt; 假设为空&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertNotNull&lt;/strong&gt; 假设不为空&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertSame&lt;/strong&gt; 假设相同（只能是对象）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertNotSame&lt;/strong&gt; 假设不相同（只能是对象）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assertArrayEquals&lt;/strong&gt; 假设数组相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;可以看到源码中这些方法都有重载第一个参数多了String的方法。这个String是用于自定义错误信息，如果“假设”不符合预期，那么提示的错误信息使用这个String来指定。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;有时候计算机表示的数尤其是浮点型类型，可能两个值存在误差，设置一个可接受无法范围，也可以让假设通过。比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.01&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;上面表示预期值和实际值最大误差小于等于0.1即“假设”成立。另外注意这些方法的期望值都是前一个参数，实际值是后一个参数，不要写反了。&lt;/p&gt;
&lt;h2&gt;JUnit Annotation&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;还记得上边创建测试类的时候出现了setUp和tearDown两个方法吗？分别对应@Before和@After这两个注解。实际上根据JUnit框架的设计，每个单元测试方法可以简单划分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;setUp&lt;/strong&gt; 对应 @Before注解的方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test&lt;/strong&gt;  对应 @Test注解的方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tearDown&lt;/strong&gt; 对应 @After注解的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果创建时勾选这两个方法，则会生成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Before&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@After&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这两个方法会在当前类中&lt;strong&gt;每一个单元测试方法&lt;/strong&gt;执行之前和执行之后分别执行。比如说需要创建一个实例，new instance()操作可以直接写在setUp方法中，减少冗余代码。同理假设要关闭一个文件流的话也可以写在tearDown方法中。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;注意看看@Test注解的注释，可以看到，它可以接受两个参数，一个是预期异常，一个是超时时间。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//预期异常，不报错（如果不出现异常则报错）&lt;/span&gt;
&lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;outOfBounds&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//超时报错&lt;/span&gt;
&lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;infinity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//这种情况要小心，注意误差问题，有可能正确，有可能错误&lt;/span&gt;
&lt;span class="nd"&gt;@Test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sleep100&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;除了上述的注解之外，JUnit还提供其他很多方便的注解，我们可以通过查看JUnit的包看到比较常用的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@BeforeClass&lt;/strong&gt; 每一个测试类执行前的操作方法注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@AfterClass&lt;/strong&gt; 每一个测试类执行完后的操作方法注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Ignore&lt;/strong&gt; 忽略某个测试方法注解（可以传入原因)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于JUnit担心我们这些注解还不够用，所以给我们自定义规则的机会，于是有@Rule这个注解给我们去自定义规则。&lt;/p&gt;
&lt;h2&gt;JUnit Rule&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;JUnit本身自带很多Rule，可以在org.junit.rules包中找到,例如比较简单的Timeout规则，可以直接创建一个类成员：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Rule&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Timeout&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MILLISECONDS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;上述规则应用到类中所有测试方法，假设方法超过100毫秒则会报错，注意这个成员规则对象必须是Public的，还有一个比较常用的DisableOnDebug规则，可以设置在Run模式下使用的规则而Debug模式不使用的规则，如下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Rule&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DisableOnDebug&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DisableOnDebug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Timeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MILLISECONDS&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;上述代码表示Run模式测试则会限制100毫秒超时，而Debug模式不会限制。虽然JUnit给我们内置了很多自定义规则，但这显然是不够用的，所以需要我们去自定义规则，下面我们来说说如何自定义Junit Rule。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在rules包下有一个TestRule接口用于给用户自定义Junit Rule，创建一个类去实现这个接口。然后重写apply方法。代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestRule&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;TestRule&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Statement&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Statement&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;其中apply方法中的base参数代表单元测试的语句，他身上的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;evaluate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//执行单元测试操作&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;而description则可以获取改单元测试方法的名称、注解、类名等等的描述。我们可以写一个简单的例子，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Statement&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Statement&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Statement&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;evaluate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;before&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//测试前打印before&lt;/span&gt;
            &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;evaluate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;after&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//测试后打印after&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;然后在需要使用这个规则的测试类中声明这个规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Rule&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyTestRule&lt;/span&gt; &lt;span class="n"&gt;myTestRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyTestRule&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;运行测试方法即即可以看到输出：
&lt;img alt="out" src="../images/junitTest/10.jpg"&gt;
&amp;emsp;&amp;emsp;这样代表自定义的规则生效了。&lt;/p&gt;
&lt;h2&gt;尾声&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;通过上文，我们学习了JUnit的用法，但是你会发现，光有JUnit框架并不能做完整的单元测试，比如说你想要使用&lt;code&gt;Log.i("tag","msg");&lt;/code&gt;的时候，单元测试会失败并且提示:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java.lang.RuntimeException: Method i in android.util.Log not mocked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这是因为JUnit并不能在纯Java层面做测试，使用非纯Java API就会报错。这需要一些Mock框架来帮助我们进行测试，这个后面抽空会写一篇新的博文介绍。&lt;/p&gt;</content><category term="android"></category><category term="test"></category><category term="junit"></category></entry><entry><title>MobSF Android静态分析使用心得</title><link href="https://maxwell-nc.github.io/android/mobsfAnalys.html" rel="alternate"></link><published>2017-05-19T00:00:00+08:00</published><updated>2017-05-19T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-19:/android/mobsfAnalys.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;此前也接触过一些第三方静态分析工具，因为工作原因接触了一款开源移动App安全框架&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;MobileSecurityFramework&lt;/a&gt;，经过一番折腾后决定写下一篇博文记录一下心得。&lt;/p&gt;
&lt;h2&gt;搭建环境&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文是基于Windows搭建的Android App静态分析环境，首先是先要到&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;Github&lt;/a&gt;上拿去拉一份源码下来。由于这个框架是基于Python开发的，而且需要反编译Apk，所以我们列下需要的环境清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.7(不能使3.x版本，低于2.7我也没有试过)&lt;/li&gt;
&lt;li&gt;Oracle JDK 1.7+&lt;/li&gt;
&lt;li&gt;MobSF源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以上是静态分析需要的环境，另外再官方的文档中写了一句推荐使用虚拟机环境搭建，否则存在安全问题，这里只是试用一下就不使用虚拟机了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;拿到源码后解压到一个目录里，在这个目录打开CMD，输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py -2 pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;注意我这里因为同时安装了Python2.x和3.x，所以使用py启动器来指定版本，如果只有Python2.x，可以直接采用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;此前也接触过一些第三方静态分析工具，因为工作原因接触了一款开源移动App安全框架&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;MobileSecurityFramework&lt;/a&gt;，经过一番折腾后决定写下一篇博文记录一下心得。&lt;/p&gt;
&lt;h2&gt;搭建环境&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文是基于Windows搭建的Android App静态分析环境，首先是先要到&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;Github&lt;/a&gt;上拿去拉一份源码下来。由于这个框架是基于Python开发的，而且需要反编译Apk，所以我们列下需要的环境清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.7(不能使3.x版本，低于2.7我也没有试过)&lt;/li&gt;
&lt;li&gt;Oracle JDK 1.7+&lt;/li&gt;
&lt;li&gt;MobSF源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以上是静态分析需要的环境，另外再官方的文档中写了一句推荐使用虚拟机环境搭建，否则存在安全问题，这里只是试用一下就不使用虚拟机了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;拿到源码后解压到一个目录里，在这个目录打开CMD，输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py -2 pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;注意我这里因为同时安装了Python2.x和3.x，所以使用py启动器来指定版本，如果只有Python2.x，可以直接采用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;其中requirements.txt是运行MobSF的Python依赖环境。如果安装完成，接下来就是运行MobSF的服务器了，在命令行输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;同样需要注意Python版本问题，第一次启动服务器会自动安装服务器需要的东西，主要是nuget、binskim、binscope等东西，国内的用户注意代理，否则可能卡住不动。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;note：&lt;/strong&gt;如果第一次安装失败不慎退出了，可以进入install目录先运行setup.py手动安装，然后在执行runserver命令。安装之后会自动生成一个自启动bat文件，根据源代码可以看出实际上他就是运行rpc_client.py。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果一切顺利的话，可以看到Django运行成功：
&lt;img alt="Django" src="../images/mobsfAnalys/1.jpg"&gt;
&amp;emsp;&amp;emsp;这个监听端口可以通过指定启动参数来修改，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver 8100
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;然后可以打开浏览器输入地址，比如默认端口为：&lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;，我这边出现了一个这样的问题（也许你可以直接看到成功画面，恭喜）：
&lt;img alt="error" src="../images/mobsfAnalys/2.jpg"&gt;
&amp;emsp;&amp;emsp;如果和我一样出现“Don't Play Around. An Error just popped in!”的朋友，可以执行后重新启动服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py migrate 
python manage.py makemigrations
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;注意原因是“no such table: StaticAnalyzer_staticanalyzerandroid”才适用这个方法。成功之后就可以看到MobSF的界面：
&lt;img alt="server" src="../images/mobsfAnalys/3.jpg"&gt;
&amp;emsp;&amp;emsp;这样就算搭建完成了，当然也有可能上传App文件的时候发生错误，这就需要大家动动脑袋来处理了。&lt;/p&gt;
&lt;h2&gt;MobSF静态分析&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;使用MobSF的静态分析十分简单，直接上传一个Apk包，等待服务器解包反编译分析结果即可。不过我使用了多次发现这个框架很有可能卡在MalwareAnalyzer上面，可能是联网检查的问题，具体我并没有分析，然后假设你中断了操作，下次再启动会重新解包重新分析，十分耗时。一切正常的话，你将会看到分析报告页面：
&lt;img alt="Analys" src="../images/mobsfAnalys/4.jpg"&gt;
&amp;emsp;&amp;emsp;这个分析报告可以说“仅供参考”，比如说PERMISSION的检测，含有&lt;code&gt;android.permission.INTERNET&lt;/code&gt;就说Dangerous（后面会分析源码），这是比较令人费解的。毕竟这个权限只要是网络应用都会使用到，那岂不是所有的应用都是危险？？&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;而对于Code Analysis里面的ISSUE，其中一个“App can read/write to External Storage. Any App can read data written to External Storage.”也是SEVERITY为High，其实也只是提示你其他App可能会串改数据而已，而不是说你不能使用外部存储器，所以只要你访问了外部存储器的API就一定会报这个问题（汗颜）。&lt;/p&gt;
&lt;h2&gt;源码及原理分析&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于上面给出的分析结果有点让人摸不着头脑，而且也没有标注错误的位置，所以只能从源码入手，分析其原理。源码的目录结构十分清晰，由于我们采用的事静态分析，可以直接找到&lt;code&gt;StaticAnalyzer&lt;/code&gt;目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├─migrations
├─test_files
├─tools
│  ├─apkid
│  │  └─rules
│  ├─d2j2
│  │  └─lib
│  ├─enjarify
│  │  ├─enjarify
│  │  │  ├─jvm
│  │  │  │  ├─constants
│  │  │  │  └─optimizatio
│  │  │  └─typeinference
│  │  └─tests
│  └─mac
└─views
    ├─android
    └─ios
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;通过打印StaticAnalyzer目录的树结构可以粗略知道，migrations是迁移文件，test_files是用来测试静态测试的文件，tools是用来反编译等的工具，views才是我们想要找的分析源码。
&amp;emsp;&amp;emsp;直接到StaticAnalyzer\views\android目录下可以很快找到对应分析的源码（十分清晰的模块名）。比如我们找一下上文所述的Premission问题，一眼可以看到dvm_permissions.py,打开发现只是一个字典，对应每个权限和状态值、描述等信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INTERNET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dangerous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;full Internet access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allows an application to create network sockets.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这还不能说明什么，我们可以继续发现manifest_analysis.py文件中导入了dvm_permissions，其中代码中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mfxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uses-permission&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;android:name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;prm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;prm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dvm_perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DVM_PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MANIFEST_PERMISSION&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;prm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dvm_perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;dangerous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Unknown permission from android reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Unknown permission from android reference&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;看以看出这个权限的检测直接就是根据dvm_permissions.py中定义的字典来决定的，并没有更多的判断规则。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接下来我们看看Code Analysis ISSUE：“The App uses an insecure Random Number Generator.”的判断原理。同理我们也可以找到code_analysis.py文件直接分析。先找到一个字典字段描述这个问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The App uses an insecure Random Number Generator.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后我们搜索key'rand'可以看到,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;apk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;java_src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;java_source/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;studio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;java_src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app/src/main/java/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eclipse&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;java_src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;src/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_pointer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;java\.util\.Random&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jfile_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;java_src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;表示只要使用了&lt;code&gt;java.util.Random&lt;/code&gt;这个类就会报这个问题。实际上即使是&lt;code&gt;java.security.SecureRandom&lt;/code&gt;也存在安全风险。所以这类问题还是比较难处理的，不过如果不涉及安全的随机数（比如为用户起一个随机昵称，而这个昵称并不作为唯一标识），即使使用了也没有关系，这里就不展开讨论了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;其他还有很多检查大体原理相似，如果经常需要用到某一个检测，也可以把那部分源码单独拷出来做成一个单独检测工具，这样不需要每次都去完整的检测才知道结果。&lt;/p&gt;
&lt;h2&gt;尾声&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;使用过后我觉得很失望，很多功能都没有，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持排除第三方&lt;/li&gt;
&lt;li&gt;不支持显示错误行数或者位置&lt;/li&gt;
&lt;li&gt;不支持Mapping&lt;/li&gt;
&lt;li&gt;不支持自定义规则&lt;/li&gt;
&lt;li&gt;不支持标记已处理的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;很多情况下使用这个框架，都是由程序员搭建好一个服务器供开发人员或者是非开发人员去检测使用。倘若出了这么一份充满Dangerous和High SEVERITY的报告给非技术人员看，更重要的是无论你怎么改都无法去掉，这想必得花好一段时间去解析吧？所以个人不是很推荐这个框架给非技术人员使用。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;当然目前这个框架还处于Beta阶段，版本号也没有到1.0，我仅仅使用了它的静态分析功能，它还有动态分析等等，总体来说这是一个很不错的工具，但是还没有足够的完善，我们期待他更好地发展。特别是规则自定义，希望可以单独出来，这样可以让更多开源力量去维护增强它。&lt;/p&gt;</content><category term="android"></category><category term="python"></category><category term="automation"></category><category term="analys"></category></entry><entry><title>Windows下使用Pelican搭建静态博客</title><link href="https://maxwell-nc.github.io/blog/pelicanBuildBlog.html" rel="alternate"></link><published>2017-05-17T00:00:00+08:00</published><updated>2017-05-17T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-17:/blog/pelicanBuildBlog.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先Pelican的知名度在国内明显没有Hexo的高，导致也没有几篇教程。遂写一篇简单的Windows搭建教程，给小白们快速使用Pelican搭建静态博客并且发表到Gtihub Pages上。&lt;/p&gt;
&lt;h2&gt;安装Pelican&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在Windows下搭建pelican环境可以说完爆Jekyll,如果熟悉Python，甚至比Hexo还要简单，闲话不多说，直接开干。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;因为Pelican是基于Python开发的，所以首先得安装Python环境。我目前使用的是&lt;a href="https://www.python.org/downloads/"&gt;Python 3.6.1&lt;/a&gt;，这个版本再Windows安装的话连环境都不需要手动配置即可完成。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接下来需要使用Python包管理工具，建议没有安装pip的可以使用easy_install安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;easy_install pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;安装完成后使用pip安装pelican和markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install markdown
pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果一切正常的话，恭喜已经搭建完成Pelican环境了，是不是很简单？&lt;/p&gt;
&lt;h2&gt;创建博客&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先你需要一个存放你的博客的目录，进入到目录里面，打开cmd，输入下面命令可以生成一个基本的博客模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如下图所示会询问你一些设置，这些设置会生成对应的pelicanconf.py配置文件和Makefile文件，不过Windows下由于不能使用Makefile，所以这里即使填错选项也可以待会在修改。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-quickstart" src="../images/pelicanBuildBlog/1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果提示"Done. Your new project …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先Pelican的知名度在国内明显没有Hexo的高，导致也没有几篇教程。遂写一篇简单的Windows搭建教程，给小白们快速使用Pelican搭建静态博客并且发表到Gtihub Pages上。&lt;/p&gt;
&lt;h2&gt;安装Pelican&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在Windows下搭建pelican环境可以说完爆Jekyll,如果熟悉Python，甚至比Hexo还要简单，闲话不多说，直接开干。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;因为Pelican是基于Python开发的，所以首先得安装Python环境。我目前使用的是&lt;a href="https://www.python.org/downloads/"&gt;Python 3.6.1&lt;/a&gt;，这个版本再Windows安装的话连环境都不需要手动配置即可完成。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接下来需要使用Python包管理工具，建议没有安装pip的可以使用easy_install安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;easy_install pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;安装完成后使用pip安装pelican和markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install markdown
pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果一切正常的话，恭喜已经搭建完成Pelican环境了，是不是很简单？&lt;/p&gt;
&lt;h2&gt;创建博客&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先你需要一个存放你的博客的目录，进入到目录里面，打开cmd，输入下面命令可以生成一个基本的博客模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如下图所示会询问你一些设置，这些设置会生成对应的pelicanconf.py配置文件和Makefile文件，不过Windows下由于不能使用Makefile，所以这里即使填错选项也可以待会在修改。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-quickstart" src="../images/pelicanBuildBlog/1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果提示"Done. Your new project is available at xxx path"这样就是已经生成成功。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下面我们来观察下生成的文件：
&lt;img alt="files" src="../images/pelicanBuildBlog/2.jpg"&gt;
&amp;emsp;&amp;emsp;注意的是publishconf.py完全导入pelicanconf.py文件，所以前者用于本地调试使用，后者发布时自动替换某些属性，例如SITEURL，不过由于我们不使用Makefile，所以直接使用pelicanconf.py文件即可。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;fabfile.py里面包括各种Deploy相关的配置和操作，可以在里面修改默认的本地服务器端口，一般来说都不需要修改。下面我们来写第一篇博客试试。&lt;/p&gt;
&lt;h2&gt;编写文章&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我们首先写一篇HelloPelican文章然后生成发布到本地瞧瞧是怎么个样子。上文说过content目录是用来存放博文等文件目录的，直接在目录里面新建一个文件test.md(本文使用MarkDown来编辑，pelican也支持reStructuredText)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: HelloPelican
Date: 2017-05-17
Category: test
Tags: test
Slug: blog/hello
Author: Maxwell-nc

&lt;span class="gu"&gt;##&lt;/span&gt;First
Text
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;其中Title等字段用来声明博客的属性，Slug为对应生成html的相对路径，如果上述最终生成路径是blog目录下的hello.html,这些字段还可以自定义，这个进阶内容可以后面再说。出去属性声明外的部分都是正文内容，##First就是正文的开始了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;简单编辑后就可以尝试生成html，并且在本地预览了。生成html可以使用下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;生成成功后，使用下面命令启动本地服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果需要临时指定非默认端口也可以在命令后面添加端口参数，如设置8080端口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican.server 8080
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果服务器启动成功，就可以通过浏览器访问&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;来预览下效果：
&lt;img alt="preview" src="../images/pelicanBuildBlog/3.jpg"&gt;
&amp;emsp;&amp;emsp;可以看到已经生成博客成功，这样就已经完成了一大步了。&lt;/p&gt;
&lt;h2&gt;静态文件&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;通过上文，我们已经成功添加第一篇博客，但是很快会发现，如果你往content目录里面添加一个images文件夹存放博文的图片，你会发现&lt;code&gt;pelican content&lt;/code&gt;并不会复制images文件夹到output目录下。这种不需要编译但又要用到的文件，我们称它为“静态文件”。pelican默认不会复制静态文件到output目录，需要我们在pelicanconf.py配置文件上面配置一下,添加一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这样就会生成output资源时就会自动把iamges文件夹拷贝到output目录了。另外使用EXTRA_PATH_METADATA也可以把某个目录的文件映射过去，例如favicon.ico放在content/extra目录下，最后需要生成到output的根目录，可以添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;自动生成发布脚本&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于Windows不能使用makefile，不能使用&lt;code&gt;make html&lt;/code&gt;这样快捷的方法来生成Html，所以我们利用Windows的批处理做一个简单的"Makefile"。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在博客根目录下新建一个auto-update.bat批处理文件，修改内容为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; off
&lt;span class="k"&gt;setlocal&lt;/span&gt; enabledelayedexpansion
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;/f&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;delims=  tokens=1&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;%%&lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;netstat -aon ^| findstr &amp;quot;8000&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="se"&gt;%%&lt;/span&gt;i
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;job&lt;/span&gt;
taskkill /F /pid &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;!a:~71,5!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
pelican content
&lt;span class="k"&gt;cd&lt;/span&gt; output
&lt;span class="k"&gt;start&lt;/span&gt; cmd /c &lt;span class="s2"&gt;&amp;quot;python -m pelican.server 8000&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;上面的代码内容是找到已经运行的服务器程序，结束它，然后重新生成Output文件，并且重新打开本地服务器。如果要修改端口可以替换bat文件中的端口号。有了这个脚本，以后需要更新预览，只需要在博客目录下打开CMD，输入auto-update.bat，敲一下回车就能自动完成了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;注意：&lt;/strong&gt;在pelicanconf.py添加&lt;code&gt;DELETE_OUTPUT_DIRECTORY = True&lt;/code&gt;可以每次生成html前都删除Output目录的文件，防止一些缓存导致的问题。&lt;/p&gt;
&lt;h2&gt;发布到Github Pages&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;很简单，把Github.io项目拉下来，用Output目录里面的内容替换掉，push上去刷新就能看到了。不过这里需要注意的是是否配置了&lt;code&gt;RELATIVE_URLS&lt;/code&gt;这个相对路径设置，&lt;code&gt;SITEURL&lt;/code&gt;也要设置成Pages的地址，否者Feed的xml地址将显示不完全，编译的时候也会提示：
"WARNING: Feeds generated without SITEURL set properly may not be valid"。所以这些都要手动检查清楚后再发布。&lt;/p&gt;
&lt;h2&gt;第三方主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果没有什么特别的需求的话，教程就到这里结束了，但是对于官方简陋的主题很多人都希望换一个主题。如果你使用过Hexo的主题甚至修改过，那恭喜你，这一步对于你来说十分简单。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先我们可以在&lt;a href="https://github.com/getpelican/pelican-themes"&gt;https://github.com/getpelican/pelican-themes&lt;/a&gt;找一个合心意的主题，然后拉下来，解压到博客目录下的Theme目录（这个目录是自己建立的，你可以起的别名字）,在pelicanconf.py下增加一行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Theme/nest&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;其中这个nest是你的主题的目录名，本博客采用的是基于nest修改的主题，可以在&lt;a href="https://github.com/maxwell-nc/nest"&gt;https://github.com/maxwell-nc/nest&lt;/a&gt;找到源代码，感谢它的作者。言归正传，添加了这行之后理论上就可以重新生成发布就可以看到了，但是要注意有些主题需要额外的参数，具体看每个主题页面的ReadMe，这里就不一样介绍了。&lt;/p&gt;
&lt;h2&gt;修改主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下面我们来简单进阶一下，尝试一下修改主题（注意这需要一点点Html知识）。下面以在博文最后添加转载信息为例。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先我们打算在每篇文章的头部添加一个自定义字段Reprint，这个字段代表转载地址字段，如果这个字段有值，则显示“转载文章”，否则显示“原创文章”。我们进入主题目录中的templates目录，templates代表模板的意思，其中article.html就是每篇文章的生成的模板。html中&lt;code&gt;article.content&lt;/code&gt;是正文的内容，我们一直定位到article.content位置，在下面添加，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{{ article.content }}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: #eb2344;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% if article.reprint %}
本文为转载文章，原文链接：&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ article.reprint }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ article.reprint }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% else %}
原创文章，欢迎转载，请保留出处。有任何错误、疑问或者建议，欢迎指出。
{% endif %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;新增的字段可以用article.reprint来访问，支持使用&lt;code&gt;{% if article.reprint %}&lt;/code&gt;结合&lt;code&gt;{% else %}&lt;/code&gt;和&lt;code&gt;{% endif %}&lt;/code&gt;的组合来实现判断。
接下来可以在一篇文章的头部，如果是转载文章，可以添加Reprint属性来声明转载文章，实现自动显示转载信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: xxx
Date: 2017-05-17
Category: xxx
Tags: xxx
Slug: blog/xxx
Author: Maxwell-nc
Reprint: https://github.com/maxwell-nc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;主题的修改除了添加转载信息之外还以修改主题的布局等等功能，除了if条件表达式还有for表达式等等的功能，或者添加评论插件、音乐播放器等等，更多的功能可以参考官方文档，这里就不重复了。&lt;/p&gt;
&lt;h2&gt;尾声&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Pelican入门的成本非常低，如果只要普通做个静态博客，相信只要一杯咖啡的时间，但是Pelican的功能远不止上述这些，本文只是抛砖引玉，感兴趣的朋友可以看看参考文章中的官方文档。&lt;/p&gt;
&lt;h2&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Pelican官方文档：&lt;a href="http://docs.getpelican.com/en/3.7.1/index.html"&gt;http://docs.getpelican.com/en/3.7.1/index.html&lt;/a&gt;&lt;/p&gt;</content><category term="pelican"></category><category term="python"></category><category term="windows"></category></entry><entry><title>博客说明</title><link href="https://maxwell-nc.github.io/blog/blogIntroduction.html" rel="alternate"></link><published>2017-05-16T00:00:00+08:00</published><updated>2017-05-16T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-16:/blog/blogIntroduction.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于之前用Hexo搭建的GitPages源目录丢失了，本来已经打算Github上面维护的博客停止维护了，但是&lt;a href="http://blog.csdn.net/maxwell_nc"&gt;我的CSDN博客&lt;/a&gt;强制要求用户绑定隐私信息，否则无法登陆，而且此前没有任何公开提前声明或通知，于是决定放弃CSDN的博客，继续拥抱GithubPages。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;然后最近发现了Python也有Pelican这样类似的静态博客搭建工具，由于自己对Python比较熟悉，于是重新用Pelican搭建了一个博客。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;虽然没有找到Windows下的Pelican教程，但是参考Linux平台下的教程也是非常轻松搭建起来了，之后有空的话顺便写一个教程(PS:由于Windows不能使用Makefile，我写了个简单的批处理代替它)。&lt;/p&gt;
&lt;h2&gt;关于博文&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;不得不说这个问题，由于上文说到我的CSDN博客无法登陆，所以无法迁移上面的博文，需要看的朋友只能移步过去了，在博客下面有一个Link可以快速跳转过去哦。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;而原来Hexo搭建的Pages文章由于数量比较少，博文主要是项目说明，所以把原来比较重要的博文内容迁移到对应项目的ReadMe上面，这样就不会有太大损失了（苦，手动迁移）。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以后会坚持带更高质量的文章给大家，有兴趣的看看原来的Hexo博客也可以查看下History拉到本地跑起来看看。&lt;/p&gt;
&lt;h2&gt;关于主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;看了下Pelican的主题并没有Hexo的主题多，虽然说可以把它移植过来，但是出于时间考虑，我只是找一个个人认为比较美观简洁的主题，然后最后还是花了半天修改了下样式和一些设置。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这个修改后的主题可以在&lt;a href="https://github.com/maxwell-nc/nest"&gt;这里&lt;/a&gt;找到，非常感谢原作者。&lt;/p&gt;
&lt;h2&gt;关于评论&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;综合各种原因，采用了Disqus第三方评论系统，这个评论系统在国外十分流行，可惜国内无法访问，本来想采用国内的平台，无奈不是已经关闭就是需要登记隐私信息 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于之前用Hexo搭建的GitPages源目录丢失了，本来已经打算Github上面维护的博客停止维护了，但是&lt;a href="http://blog.csdn.net/maxwell_nc"&gt;我的CSDN博客&lt;/a&gt;强制要求用户绑定隐私信息，否则无法登陆，而且此前没有任何公开提前声明或通知，于是决定放弃CSDN的博客，继续拥抱GithubPages。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;然后最近发现了Python也有Pelican这样类似的静态博客搭建工具，由于自己对Python比较熟悉，于是重新用Pelican搭建了一个博客。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;虽然没有找到Windows下的Pelican教程，但是参考Linux平台下的教程也是非常轻松搭建起来了，之后有空的话顺便写一个教程(PS:由于Windows不能使用Makefile，我写了个简单的批处理代替它)。&lt;/p&gt;
&lt;h2&gt;关于博文&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;不得不说这个问题，由于上文说到我的CSDN博客无法登陆，所以无法迁移上面的博文，需要看的朋友只能移步过去了，在博客下面有一个Link可以快速跳转过去哦。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;而原来Hexo搭建的Pages文章由于数量比较少，博文主要是项目说明，所以把原来比较重要的博文内容迁移到对应项目的ReadMe上面，这样就不会有太大损失了（苦，手动迁移）。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以后会坚持带更高质量的文章给大家，有兴趣的看看原来的Hexo博客也可以查看下History拉到本地跑起来看看。&lt;/p&gt;
&lt;h2&gt;关于主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;看了下Pelican的主题并没有Hexo的主题多，虽然说可以把它移植过来，但是出于时间考虑，我只是找一个个人认为比较美观简洁的主题，然后最后还是花了半天修改了下样式和一些设置。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这个修改后的主题可以在&lt;a href="https://github.com/maxwell-nc/nest"&gt;这里&lt;/a&gt;找到，非常感谢原作者。&lt;/p&gt;
&lt;h2&gt;关于评论&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;综合各种原因，采用了Disqus第三方评论系统，这个评论系统在国外十分流行，可惜国内无法访问，本来想采用国内的平台，无奈不是已经关闭就是需要登记隐私信息，所以最终还是采用了Disqus。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这个问题让我折腾前后试了好几款评论系统，本来觉得评论是最快的交流方式，不过由于博客在Pages上，国内的搜索引擎并不收录，所以国内的朋友请使用下面的联系方式和我交流↓↓↓。&lt;/p&gt;
&lt;h2&gt;关于联系方式&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;虽然Otulook邮箱可以使用，但是我很少查看，加上上次微软回收了一次这个账号，所以如果不是发不到163邮箱，尽量发到163邮箱，很高兴能和你交流讨论学习。&lt;/p&gt;
&lt;p&gt;163邮箱：
&amp;emsp;&amp;emsp;&lt;a href="mailto:maxwell_nc@163.com"&gt;maxwell_nc@163.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Outlook邮箱：
&amp;emsp;&amp;emsp;&lt;a href="mailto:maxwell-nc@outlook.com"&gt;maxwell-nc@outlook.com&lt;/a&gt;&lt;/p&gt;</content><category term="blog"></category></entry></feed>