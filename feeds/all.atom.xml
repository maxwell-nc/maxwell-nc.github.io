<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Maxwell's Growth Path</title><link href="https://maxwell-nc.github.io/" rel="alternate"></link><link href="https://maxwell-nc.github.io/feeds/all.atom.xml" rel="self"></link><id>https://maxwell-nc.github.io/</id><updated>2017-05-19T00:00:00+08:00</updated><entry><title>MobSF Android静态分析使用心得</title><link href="https://maxwell-nc.github.io/android/mobsfAnalys.html" rel="alternate"></link><published>2017-05-19T00:00:00+08:00</published><updated>2017-05-19T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-19:/android/mobsfAnalys.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;此前也接触过一些第三方静态分析工具，因为工作原因接触了一款开源移动App安全框架&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;MobileSecurityFramework&lt;/a&gt;，经过一番折腾后决定写下一篇博文记录一下心得。&lt;/p&gt;
&lt;h2&gt;搭建环境&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文是基于Windows搭建的Android App静态分析环境，首先是先要到&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;Github&lt;/a&gt;上拿去拉一份源码下来。由于这个框架是基于Python开发的，而且需要反编译Apk，所以我们列下需要的环境清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.7(不能使3.x版本，低于2.7我也没有试过)&lt;/li&gt;
&lt;li&gt;Oracle JDK 1.7+&lt;/li&gt;
&lt;li&gt;MobSF源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以上是静态分析需要的环境，另外再官方的文档中写了一句推荐使用虚拟机环境搭建，否则存在安全问题，这里只是试用一下就不使用虚拟机了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;拿到源码后解压到一个目录里，在这个目录打开CMD，输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py -2 pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;注意我这里因为同时安装了Python2.x和3.x，所以使用py启动器来指定版本，如果只有Python2.x，可以直接采用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;此前也接触过一些第三方静态分析工具，因为工作原因接触了一款开源移动App安全框架&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;MobileSecurityFramework&lt;/a&gt;，经过一番折腾后决定写下一篇博文记录一下心得。&lt;/p&gt;
&lt;h2&gt;搭建环境&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;本文是基于Windows搭建的Android App静态分析环境，首先是先要到&lt;a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF"&gt;Github&lt;/a&gt;上拿去拉一份源码下来。由于这个框架是基于Python开发的，而且需要反编译Apk，所以我们列下需要的环境清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.7(不能使3.x版本，低于2.7我也没有试过)&lt;/li&gt;
&lt;li&gt;Oracle JDK 1.7+&lt;/li&gt;
&lt;li&gt;MobSF源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以上是静态分析需要的环境，另外再官方的文档中写了一句推荐使用虚拟机环境搭建，否则存在安全问题，这里只是试用一下就不使用虚拟机了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;拿到源码后解压到一个目录里，在这个目录打开CMD，输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;py -2 pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;注意我这里因为同时安装了Python2.x和3.x，所以使用py启动器来指定版本，如果只有Python2.x，可以直接采用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;其中requirements.txt是运行MobSF的Python依赖环境。如果安装完成，接下来就是运行MobSF的服务器了，在命令行输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;同样需要注意Python版本问题，第一次启动服务器会自动安装服务器需要的东西，主要是nuget、binskim、binscope等东西，国内的用户注意代理，否则可能卡住不动。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;note：&lt;/strong&gt;如果第一次安装失败不慎退出了，可以进入install目录先运行setup.py手动安装，然后在执行runserver命令。安装之后会自动生成一个自启动bat文件，根据源代码可以看出实际上他就是运行rpc_client.py。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果一切顺利的话，可以看到Django运行成功：
&lt;img alt="Django" src="../images/mobsfAnalys/1.jpg"&gt;
&amp;emsp;&amp;emsp;这个监听端口可以通过指定启动参数来修改，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver 8100
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;然后可以打开浏览器输入地址，比如默认端口为：&lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;，我这边出现了一个这样的问题（也许你可以直接看到成功画面，恭喜）：
&lt;img alt="error" src="../images/mobsfAnalys/2.jpg"&gt;
&amp;emsp;&amp;emsp;如果和我一样出现“Don't Play Around. An Error just popped in!”的朋友，可以执行后重新启动服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py migrate 
python manage.py makemigrations
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;注意原因是“no such table: StaticAnalyzer_staticanalyzerandroid”才适用这个方法。成功之后就可以看到MobSF的界面：
&lt;img alt="server" src="../images/mobsfAnalys/3.jpg"&gt;
&amp;emsp;&amp;emsp;这样就算搭建完成了，当然也有可能上传App文件的时候发生错误，这就需要大家动动脑袋来处理了。&lt;/p&gt;
&lt;h2&gt;MobSF静态分析&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;使用MobSF的静态分析十分简单，直接上传一个Apk包，等待服务器解包反编译分析结果即可。不过我使用了多次发现这个框架很有可能卡在MalwareAnalyzer上面，可能是联网检查的问题，具体我并没有分析，然后假设你中断了操作，下次再启动会重新解包重新分析，十分耗时。一切正常的话，你将会看到分析报告页面：
&lt;img alt="Analys" src="../images/mobsfAnalys/4.jpg"&gt;
&amp;emsp;&amp;emsp;这个分析报告可以说“仅供参考”，比如说PERMISSION的检测，含有&lt;code&gt;android.permission.INTERNET&lt;/code&gt;就说Dangerous（后面会分析源码），这是比较令人费解的。毕竟这个权限只要是网络应用都会使用到，那岂不是所有的应用都是危险？？&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;而对于Code Analysis里面的ISSUE，其中一个“App can read/write to External Storage. Any App can read data written to External Storage.”也是SEVERITY为High，其实也只是提示你其他App可能会串改数据而已，而不是说你不能使用外部存储器，所以只要你访问了外部存储器的API就一定会报这个问题（汗颜）。&lt;/p&gt;
&lt;h2&gt;源码及原理分析&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于上面给出的分析结果有点让人摸不着头脑，而且也没有标注错误的位置，所以只能从源码入手，分析其原理。源码的目录结构十分清晰，由于我们采用的事静态分析，可以直接找到&lt;code&gt;StaticAnalyzer&lt;/code&gt;目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├─migrations
├─test_files
├─tools
│  ├─apkid
│  │  └─rules
│  ├─d2j2
│  │  └─lib
│  ├─enjarify
│  │  ├─enjarify
│  │  │  ├─jvm
│  │  │  │  ├─constants
│  │  │  │  └─optimizatio
│  │  │  └─typeinference
│  │  └─tests
│  └─mac
└─views
    ├─android
    └─ios
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;通过打印StaticAnalyzer目录的树结构可以粗略知道，migrations是迁移文件，test_files是用来测试静态测试的文件，tools是用来反编译等的工具，views才是我们想要找的分析源码。
&amp;emsp;&amp;emsp;直接到StaticAnalyzer\views\android目录下可以很快找到对应分析的源码（十分清晰的模块名）。比如我们找一下上文所述的Premission问题，一眼可以看到dvm_permissions.py,打开发现只是一个字典，对应每个权限和状态值、描述等信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INTERNET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dangerous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;full Internet access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allows an application to create network sockets.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这还不能说明什么，我们可以继续发现manifest_analysis.py文件中导入了dvm_permissions，其中代码中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;permissions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mfxml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uses-permission&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;android:name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;prm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;prm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dvm_perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DVM_PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MANIFEST_PERMISSION&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;prm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dvm_perm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;dangerous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Unknown permission from android reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Unknown permission from android reference&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;看以看出这个权限的检测直接就是根据dvm_permissions.py中定义的字典来决定的，并没有更多的判断规则。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接下来我们看看Code Analysis ISSUE：“The App uses an insecure Random Number Generator.”的判断原理。同理我们也可以找到code_analysis.py文件直接分析。先找到一个字典字段描述这个问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The App uses an insecure Random Number Generator.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后我们搜索key'rand'可以看到,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;apk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;java_src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;java_source/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;studio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;java_src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app/src/main/java/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eclipse&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;java_src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;src/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;dat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_pointer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;java\.util\.Random&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dat&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jfile_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;java_src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;表示只要使用了&lt;code&gt;java.util.Random&lt;/code&gt;这个类就会报这个问题。实际上即使是&lt;code&gt;java.security.SecureRandom&lt;/code&gt;也存在安全风险。所以这类问题还是比较难处理的，不过如果不涉及安全的随机数（比如为用户起一个随机昵称，而这个昵称并不作为唯一标识），即使使用了也没有关系，这里就不展开讨论了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;其他还有很多检查大体原理相似，如果经常需要用到某一个检测，也可以把那部分源码单独拷出来做成一个单独检测工具，这样不需要每次都去完整的检测才知道结果。&lt;/p&gt;
&lt;h2&gt;尾声&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;使用过后我觉得很失望，很多功能都没有，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持排除第三方&lt;/li&gt;
&lt;li&gt;不支持显示错误行数或者位置&lt;/li&gt;
&lt;li&gt;不支持Mapping&lt;/li&gt;
&lt;li&gt;不支持自定义规则&lt;/li&gt;
&lt;li&gt;不支持标记已处理的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;很多情况下使用这个框架，都是由程序员搭建好一个服务器供开发人员或者是非开发人员去检测使用。倘若出了这么一份充满Dangerous和High SEVERITY的报告给非技术人员看，更重要的是无论你怎么改都无法去掉，这想必得花好一段时间去解析吧？所以个人不是很推荐这个框架给非技术人员使用。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;当然目前这个框架还处于Beta阶段，版本号也没有到1.0，我仅仅使用了它的静态分析功能，它还有动态分析等等，总体来说这是一个很不错的工具，但是还没有足够的完善，我们期待他更好地发展。特别是规则自定义，希望可以单独出来，这样可以让更多开源力量去维护增强它。&lt;/p&gt;</content><category term="android"></category><category term="python"></category><category term="automation"></category><category term="analys"></category></entry><entry><title>Windows下使用Pelican搭建静态博客</title><link href="https://maxwell-nc.github.io/blog/pelicanBuildBlog.html" rel="alternate"></link><published>2017-05-17T00:00:00+08:00</published><updated>2017-05-17T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-17:/blog/pelicanBuildBlog.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先Pelican的知名度在国内明显没有Hexo的高，导致也没有几篇教程。遂写一篇简单的Windows搭建教程，给小白们快速使用Pelican搭建静态博客并且发表到Gtihub Pages上。&lt;/p&gt;
&lt;h2&gt;安装Pelican&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在Windows下搭建pelican环境可以说完爆Jekyll,如果熟悉Python，甚至比Hexo还要简单，闲话不多说，直接开干。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;因为Pelican是基于Python开发的，所以首先得安装Python环境。我目前使用的是&lt;a href="https://www.python.org/downloads/"&gt;Python 3.6.1&lt;/a&gt;，这个版本再Windows安装的话连环境都不需要手动配置即可完成。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接下来需要使用Python包管理工具，建议没有安装pip的可以使用easy_install安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;easy_install pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;安装完成后使用pip安装pelican和markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install markdown
pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果一切正常的话，恭喜已经搭建完成Pelican环境了，是不是很简单？&lt;/p&gt;
&lt;h2&gt;创建博客&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先你需要一个存放你的博客的目录，进入到目录里面，打开cmd，输入下面命令可以生成一个基本的博客模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如下图所示会询问你一些设置，这些设置会生成对应的pelicanconf.py配置文件和Makefile文件，不过Windows下由于不能使用Makefile，所以这里即使填错选项也可以待会在修改。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-quickstart" src="../images/pelicanBuildBlog/1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果提示"Done. Your new project …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先Pelican的知名度在国内明显没有Hexo的高，导致也没有几篇教程。遂写一篇简单的Windows搭建教程，给小白们快速使用Pelican搭建静态博客并且发表到Gtihub Pages上。&lt;/p&gt;
&lt;h2&gt;安装Pelican&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在Windows下搭建pelican环境可以说完爆Jekyll,如果熟悉Python，甚至比Hexo还要简单，闲话不多说，直接开干。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;因为Pelican是基于Python开发的，所以首先得安装Python环境。我目前使用的是&lt;a href="https://www.python.org/downloads/"&gt;Python 3.6.1&lt;/a&gt;，这个版本再Windows安装的话连环境都不需要手动配置即可完成。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接下来需要使用Python包管理工具，建议没有安装pip的可以使用easy_install安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;easy_install pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;安装完成后使用pip安装pelican和markdown&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install markdown
pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果一切正常的话，恭喜已经搭建完成Pelican环境了，是不是很简单？&lt;/p&gt;
&lt;h2&gt;创建博客&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先你需要一个存放你的博客的目录，进入到目录里面，打开cmd，输入下面命令可以生成一个基本的博客模板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如下图所示会询问你一些设置，这些设置会生成对应的pelicanconf.py配置文件和Makefile文件，不过Windows下由于不能使用Makefile，所以这里即使填错选项也可以待会在修改。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican-quickstart" src="../images/pelicanBuildBlog/1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果提示"Done. Your new project is available at xxx path"这样就是已经生成成功。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下面我们来观察下生成的文件：
&lt;img alt="files" src="../images/pelicanBuildBlog/2.jpg"&gt;
&amp;emsp;&amp;emsp;注意的是publishconf.py完全导入pelicanconf.py文件，所以前者用于本地调试使用，后者发布时自动替换某些属性，例如SITEURL，不过由于我们不使用Makefile，所以直接使用pelicanconf.py文件即可。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;fabfile.py里面包括各种Deploy相关的配置和操作，可以在里面修改默认的本地服务器端口，一般来说都不需要修改。下面我们来写第一篇博客试试。&lt;/p&gt;
&lt;h2&gt;编写文章&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我们首先写一篇HelloPelican文章然后生成发布到本地瞧瞧是怎么个样子。上文说过content目录是用来存放博文等文件目录的，直接在目录里面新建一个文件test.md(本文使用MarkDown来编辑，pelican也支持reStructuredText)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: HelloPelican
Date: 2017-05-17
Category: test
Tags: test
Slug: blog/hello
Author: Maxwell-nc

&lt;span class="gu"&gt;##&lt;/span&gt;First
Text
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;其中Title等字段用来声明博客的属性，Slug为对应生成html的相对路径，如果上述最终生成路径是blog目录下的hello.html,这些字段还可以自定义，这个进阶内容可以后面再说。出去属性声明外的部分都是正文内容，##First就是正文的开始了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;简单编辑后就可以尝试生成html，并且在本地预览了。生成html可以使用下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;生成成功后，使用下面命令启动本地服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果需要临时指定非默认端口也可以在命令后面添加端口参数，如设置8080端口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pelican.server 8080
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果服务器启动成功，就可以通过浏览器访问&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;来预览下效果：
&lt;img alt="preview" src="../images/pelicanBuildBlog/3.jpg"&gt;
&amp;emsp;&amp;emsp;可以看到已经生成博客成功，这样就已经完成了一大步了。&lt;/p&gt;
&lt;h2&gt;静态文件&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;通过上文，我们已经成功添加第一篇博客，但是很快会发现，如果你往content目录里面添加一个images文件夹存放博文的图片，你会发现&lt;code&gt;pelican content&lt;/code&gt;并不会复制images文件夹到output目录下。这种不需要编译但又要用到的文件，我们称它为“静态文件”。pelican默认不会复制静态文件到output目录，需要我们在pelicanconf.py配置文件上面配置一下,添加一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这样就会生成output资源时就会自动把iamges文件夹拷贝到output目录了。另外使用EXTRA_PATH_METADATA也可以把某个目录的文件映射过去，例如favicon.ico放在content/extra目录下，最后需要生成到output的根目录，可以添加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;自动生成发布脚本&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于Windows不能使用makefile，不能使用&lt;code&gt;make html&lt;/code&gt;这样快捷的方法来生成Html，所以我们利用Windows的批处理做一个简单的"Makefile"。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在博客根目录下新建一个auto-update.bat批处理文件，修改内容为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; off
&lt;span class="k"&gt;setlocal&lt;/span&gt; enabledelayedexpansion
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;/f&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;delims=  tokens=1&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;%%&lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;netstat -aon ^| findstr &amp;quot;8000&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="se"&gt;%%&lt;/span&gt;i
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="nl"&gt;job&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;job&lt;/span&gt;
taskkill /F /pid &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;!a:~71,5!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
pelican content
&lt;span class="k"&gt;cd&lt;/span&gt; output
&lt;span class="k"&gt;start&lt;/span&gt; cmd /c &lt;span class="s2"&gt;&amp;quot;python -m pelican.server 8000&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;上面的代码内容是找到已经运行的服务器程序，结束它，然后重新生成Output文件，并且重新打开本地服务器。如果要修改端口可以替换bat文件中的端口号。有了这个脚本，以后需要更新预览，只需要在博客目录下打开CMD，输入auto-update.bat，敲一下回车就能自动完成了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;注意：&lt;/strong&gt;在pelicanconf.py添加&lt;code&gt;DELETE_OUTPUT_DIRECTORY = True&lt;/code&gt;可以每次生成html前都删除Output目录的文件，防止一些缓存导致的问题。&lt;/p&gt;
&lt;h2&gt;发布到Github Pages&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;很简单，把Github.io项目拉下来，用Output目录里面的内容替换掉，push上去刷新就能看到了。不过这里需要注意的是是否配置了&lt;code&gt;RELATIVE_URLS&lt;/code&gt;这个相对路径设置，&lt;code&gt;SITEURL&lt;/code&gt;也要设置成Pages的地址，否者Feed的xml地址将显示不完全，编译的时候也会提示：
"WARNING: Feeds generated without SITEURL set properly may not be valid"。所以这些都要手动检查清楚后再发布。&lt;/p&gt;
&lt;h2&gt;第三方主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如果没有什么特别的需求的话，教程就到这里结束了，但是对于官方简陋的主题很多人都希望换一个主题。如果你使用过Hexo的主题甚至修改过，那恭喜你，这一步对于你来说十分简单。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先我们可以在&lt;a href="https://github.com/getpelican/pelican-themes"&gt;https://github.com/getpelican/pelican-themes&lt;/a&gt;找一个合心意的主题，然后拉下来，解压到博客目录下的Theme目录（这个目录是自己建立的，你可以起的别名字）,在pelicanconf.py下增加一行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Theme/nest&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;其中这个nest是你的主题的目录名，本博客采用的是基于nest修改的主题，可以在&lt;a href="https://github.com/maxwell-nc/nest"&gt;https://github.com/maxwell-nc/nest&lt;/a&gt;找到源代码，感谢它的作者。言归正传，添加了这行之后理论上就可以重新生成发布就可以看到了，但是要注意有些主题需要额外的参数，具体看每个主题页面的ReadMe，这里就不一样介绍了。&lt;/p&gt;
&lt;h2&gt;修改主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下面我们来简单进阶一下，尝试一下修改主题（注意这需要一点点Html知识）。下面以在博文最后添加转载信息为例。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;首先我们打算在每篇文章的头部添加一个自定义字段Reprint，这个字段代表转载地址字段，如果这个字段有值，则显示“转载文章”，否则显示“原创文章”。我们进入主题目录中的templates目录，templates代表模板的意思，其中article.html就是每篇文章的生成的模板。html中&lt;code&gt;article.content&lt;/code&gt;是正文的内容，我们一直定位到article.content位置，在下面添加，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{{ article.content }}
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;color: #eb2344;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% if article.reprint %}
本文为转载文章，原文链接：&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ article.reprint }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ article.reprint }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% else %}
原创文章，欢迎转载，请保留出处。有任何错误、疑问或者建议，欢迎指出。
{% endif %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;新增的字段可以用article.reprint来访问，支持使用&lt;code&gt;{% if article.reprint %}&lt;/code&gt;结合&lt;code&gt;{% else %}&lt;/code&gt;和&lt;code&gt;{% endif %}&lt;/code&gt;的组合来实现判断。
接下来可以在一篇文章的头部，如果是转载文章，可以添加Reprint属性来声明转载文章，实现自动显示转载信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: xxx
Date: 2017-05-17
Category: xxx
Tags: xxx
Slug: blog/xxx
Author: Maxwell-nc
Reprint: https://github.com/maxwell-nc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;主题的修改除了添加转载信息之外还以修改主题的布局等等功能，除了if条件表达式还有for表达式等等的功能，或者添加评论插件、音乐播放器等等，更多的功能可以参考官方文档，这里就不重复了。&lt;/p&gt;
&lt;h2&gt;尾声&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Pelican入门的成本非常低，如果只要普通做个静态博客，相信只要一杯咖啡的时间，但是Pelican的功能远不止上述这些，本文只是抛砖引玉，感兴趣的朋友可以看看参考文章中的官方文档。&lt;/p&gt;
&lt;h2&gt;参考文章&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Pelican官方文档：&lt;a href="http://docs.getpelican.com/en/3.7.1/index.html"&gt;http://docs.getpelican.com/en/3.7.1/index.html&lt;/a&gt;&lt;/p&gt;</content><category term="pelican"></category><category term="python"></category><category term="windows"></category></entry><entry><title>博客说明</title><link href="https://maxwell-nc.github.io/blog/blogIntroduction.html" rel="alternate"></link><published>2017-05-16T00:00:00+08:00</published><updated>2017-05-16T00:00:00+08:00</updated><author><name>Maxwell-nc</name></author><id>tag:maxwell-nc.github.io,2017-05-16:/blog/blogIntroduction.html</id><summary type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于之前用Hexo搭建的GitPages源目录丢失了，本来已经打算Github上面维护的博客停止维护了，但是&lt;a href="http://blog.csdn.net/maxwell_nc"&gt;我的CSDN博客&lt;/a&gt;强制要求用户绑定隐私信息，否则无法登陆，而且此前没有任何公开提前声明或通知，于是决定放弃CSDN的博客，继续拥抱GithubPages。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;然后最近发现了Python也有Pelican这样类似的静态博客搭建工具，由于自己对Python比较熟悉，于是重新用Pelican搭建了一个博客。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;虽然没有找到Windows下的Pelican教程，但是参考Linux平台下的教程也是非常轻松搭建起来了，之后有空的话顺便写一个教程(PS:由于Windows不能使用Makefile，我写了个简单的批处理代替它)。&lt;/p&gt;
&lt;h2&gt;关于博文&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;不得不说这个问题，由于上文说到我的CSDN博客无法登陆，所以无法迁移上面的博文，需要看的朋友只能移步过去了，在博客下面有一个Link可以快速跳转过去哦。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;而原来Hexo搭建的Pages文章由于数量比较少，博文主要是项目说明，所以把原来比较重要的博文内容迁移到对应项目的ReadMe上面，这样就不会有太大损失了（苦，手动迁移）。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以后会坚持带更高质量的文章给大家，有兴趣的看看原来的Hexo博客也可以查看下History拉到本地跑起来看看。&lt;/p&gt;
&lt;h2&gt;关于主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;看了下Pelican的主题并没有Hexo的主题多，虽然说可以把它移植过来，但是出于时间考虑，我只是找一个个人认为比较美观简洁的主题，然后最后还是花了半天修改了下样式和一些设置。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这个修改后的主题可以在&lt;a href="https://github.com/maxwell-nc/nest"&gt;这里&lt;/a&gt;找到，非常感谢原作者。&lt;/p&gt;
&lt;h2&gt;关于评论&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;综合各种原因，采用了Disqus第三方评论系统，这个评论系统在国外十分流行，可惜国内无法访问，本来想采用国内的平台，无奈不是已经关闭就是需要登记隐私信息 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;前序&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于之前用Hexo搭建的GitPages源目录丢失了，本来已经打算Github上面维护的博客停止维护了，但是&lt;a href="http://blog.csdn.net/maxwell_nc"&gt;我的CSDN博客&lt;/a&gt;强制要求用户绑定隐私信息，否则无法登陆，而且此前没有任何公开提前声明或通知，于是决定放弃CSDN的博客，继续拥抱GithubPages。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;然后最近发现了Python也有Pelican这样类似的静态博客搭建工具，由于自己对Python比较熟悉，于是重新用Pelican搭建了一个博客。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;虽然没有找到Windows下的Pelican教程，但是参考Linux平台下的教程也是非常轻松搭建起来了，之后有空的话顺便写一个教程(PS:由于Windows不能使用Makefile，我写了个简单的批处理代替它)。&lt;/p&gt;
&lt;h2&gt;关于博文&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;不得不说这个问题，由于上文说到我的CSDN博客无法登陆，所以无法迁移上面的博文，需要看的朋友只能移步过去了，在博客下面有一个Link可以快速跳转过去哦。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;而原来Hexo搭建的Pages文章由于数量比较少，博文主要是项目说明，所以把原来比较重要的博文内容迁移到对应项目的ReadMe上面，这样就不会有太大损失了（苦，手动迁移）。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以后会坚持带更高质量的文章给大家，有兴趣的看看原来的Hexo博客也可以查看下History拉到本地跑起来看看。&lt;/p&gt;
&lt;h2&gt;关于主题&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;看了下Pelican的主题并没有Hexo的主题多，虽然说可以把它移植过来，但是出于时间考虑，我只是找一个个人认为比较美观简洁的主题，然后最后还是花了半天修改了下样式和一些设置。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这个修改后的主题可以在&lt;a href="https://github.com/maxwell-nc/nest"&gt;这里&lt;/a&gt;找到，非常感谢原作者。&lt;/p&gt;
&lt;h2&gt;关于评论&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;综合各种原因，采用了Disqus第三方评论系统，这个评论系统在国外十分流行，可惜国内无法访问，本来想采用国内的平台，无奈不是已经关闭就是需要登记隐私信息，所以最终还是采用了Disqus。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这个问题让我折腾前后试了好几款评论系统，本来觉得评论是最快的交流方式，不过由于博客在Pages上，国内的搜索引擎并不收录，所以国内的朋友请使用下面的联系方式和我交流↓↓↓。&lt;/p&gt;
&lt;h2&gt;关于联系方式&lt;/h2&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;虽然Otulook邮箱可以使用，但是我很少查看，加上上次微软回收了一次这个账号，所以如果不是发不到163邮箱，尽量发到163邮箱，很高兴能和你交流讨论学习。&lt;/p&gt;
&lt;p&gt;163邮箱：
&amp;emsp;&amp;emsp;&lt;a href="mailto:maxwell_nc@163.com"&gt;maxwell_nc@163.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Outlook邮箱：
&amp;emsp;&amp;emsp;&lt;a href="mailto:maxwell-nc@outlook.com"&gt;maxwell-nc@outlook.com&lt;/a&gt;&lt;/p&gt;</content><category term="blog"></category></entry></feed>